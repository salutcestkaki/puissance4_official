package puissance4.modele;import org.junit.Before;import org.junit.Test;import puissance4.interfaces.*;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.core.IsEqual.equalTo;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import static puissance4.interfaces.CaseVide.CASE_VIDE;import static puissance4.interfaces.Pion.JAUNE;import static puissance4.interfaces.Pion.ROUGE;public class TestModele {    private Modele modele;    @Before    public void creerModele() {        modele = new Modele();    }    @Test    public void testPionEmpiles() throws            ExceptionMauvaisNumeroDeColonne,            ExceptionMauvaisNumeroDeLigne, ExceptionColonnePleine {        modele.lacherPionDansColonne(1, ROUGE);        modele.lacherPionDansColonne(1, JAUNE);        modele.lacherPionDansColonne(1, ROUGE);        assertTrue(modele.pionEnPosition(3, 1) == ROUGE);        assertTrue(modele.pionEnPosition(2, 1) == JAUNE);        assertTrue(modele.pionEnPosition(4, 1) == CASE_VIDE);        assertThat(modele.pionEnPosition(3, 1), equalTo(ROUGE));    }    @Test    public void testColonnePleine() throws ExceptionMauvaisNumeroDeColonne, ExceptionMauvaisNumeroDeLigne, ExceptionColonnePleine {        for (int i = 0; i < 5; i++) modele.lacherPionDansColonne(1, ROUGE);        assertFalse(modele.colonnePleine(1));        modele.lacherPionDansColonne(1, JAUNE);        assertTrue(modele.colonnePleine(1));    }    @Test    public void testModeleVide() throws ExceptionMauvaisNumeroDeColonne, ExceptionColonnePleine {        for (int i = 0; i < 5; i++) {            modele.lacherPionDansColonne(1, ROUGE);        }        modele.vider();        assertThat(modele.nbPionsJoues(), equalTo(0));    }    @Test    public void testNbPionsJoues() throws ExceptionMauvaisNumeroDeColonne, ExceptionColonnePleine {        for (int col = 1; col < 8; col++) modele.lacherPionDansColonne(col, ROUGE);        assertThat(modele.nbPionsJoues(), equalTo(7));    }    @Test(expected = ExceptionColonnePleine.class)    public void testExceptionColonnePleine() throws ExceptionMauvaisNumeroDeColonne, ExceptionColonnePleine {        for (int i = 0; i < 7; i++) modele.lacherPionDansColonne(1, ROUGE);    }    @Test(expected = ExceptionMauvaisNumeroDeColonne.class)    public void testExceptionMauvaisNumeroDeColonne() throws  ExceptionMauvaisNumeroDeColonne, ExceptionColonnePleine {        modele.lacherPionDansColonne(0, ROUGE);    }    @Test(expected = ExceptionMauvaisNumeroDeLigne.class)    public void testExceptionMauvaisNumeroDeLigne() throws  ExceptionMauvaisNumeroDeColonne, ExceptionMauvaisNumeroDeLigne, ExceptionColonnePleine {        modele.lacherPionDansColonne(1, ROUGE);        modele.pionEnPosition(7, 1);    }    @Test    public void testToStringMethod() throws ExceptionMauvaisNumeroDeColonne, ExceptionColonnePleine {        for (int col = 1; col <= 7; col++)            for (int coup = 1; coup <= 7 - col; coup++)                modele.lacherPionDansColonne(col, col % 2 == 1 ? ROUGE : JAUNE);        String attendu = "R      \n" + "RJ     \n" + "RJR    \n" + "RJRJ   \n" + "RJRJR  \n" + "RJRJRJ \n";        assertThat(modele.toString(), equalTo(attendu));    }    @Test    public void testRetirerPionColonne() throws ExceptionMauvaisNumeroDeColonne, ExceptionColonnePleine, ExceptionMauvaisNumeroDeLigne {        modele.retirerPionDeLaColonne(1);        modele.lacherPionDansColonne(1, ROUGE);        modele.lacherPionDansColonne(1, JAUNE);        modele.retirerPionDeLaColonne(1);        assertThat(modele.pionEnPosition(2, 1), equalTo(CASE_VIDE));        assertThat(modele.pionEnPosition(1, 1), equalTo(ROUGE));    }}